// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package transport;

option go_package = "transportpb";

import "transport/transport.proto";
import "server/user.proto";
import "google/protobuf/timestamp.proto";


// Start a listener either on the server, or on an implant
message StartReverseHandlerRequest {
        Listener Listener = 1;
        bool Persist = 2;

        // Protocol-specific
        // HTTP HTTP = 10;      // HTTP listener options
        // DNS DNS = 11;        // DNS listener options
        // MTLS = 12;           // MTLS listener options
}

message StartReverseHandler {
        bool Success = 1;
        string Err = 2;
}

// Stop a reverse handler listener on the server or implant
message StopReverseHandlerRequest {
        uint32 ID = 1;
}

message StopReverseHandler {
        bool Success = 1;
        string Err = 2;
}


// Bind to a reverse listener runned by an implant
message StartBindHandlerRequest {
        transport.Protocol Protocol = 1;
        string RHost = 2;
        uint32 RPort = 3;
        uint32 GhostID = 4;     // In case two same addresses for two ghosts
}

message StartBindHandler {
        bool Success = 1;
        string Err = 2;
}

// Listener - A reverse handler, for any protocol and source
message Listener {
        transport.Protocol Protocol = 1;
        string LHost = 2;
        uint32 LPort = 3;
        string RHost = 4;
        uint32 RPort = 5;
        uint32 GhostID = 6;     // In case two same addresses for two ghosts
        server.User Owner = 7;
        Permissions Permissions  = 8;
        // Timestamp
        google.protobuf.Timestamp CreatedAt = 38;
        google.protobuf.Timestamp UpdatedAt = 39;
}

// Permissions - Who has the right to kill a listener 
enum Permissions {
        OWNER = 0;
        ADMIN = 1;
        ALL = 2;
}
