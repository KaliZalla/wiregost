// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package server;

option go_package = "serverpb";

import "transport/transport.proto";

// Compiler - Manages all compilation (console & implants) in Wiregost.
service Compiler {
        // GetGhostProfiles - Returns all saved ghost implants build profiles.
        rpc GetGhostProfiles(GhostProfilesRequest) returns (GhostProfiles);
        // CompileGhost - Request to compile a ghost implant.
        rpc CompileGhost(BuildGhostRequest) returns (BuildGhost);
        // CompileConsole - Request to compile a user console.
        rpc CompileConsole(BuildConsoleRequest) returns (BuildConsole);
}

// GhostConfig - Stores all configuration elements needed to compile an implant.
message GhostBuild {

        uint32 ID = 1;
        string Name = 2;
        string Hostname = 3;        // If set, restrict to some host 
        string Username = 4;        // If set, restrict to some user on target
        string OS = 7;
        string Arch = 8;
        string Filename = 10;       // Where to output binary
        uint32 WorkspaceID = 13;

        bool Obfuscated = 15;
        enum Format {
                EXECUTABLE = 0;
                SHARED_LIB = 1;
                SHELLCODE = 2;
        }

        repeated transport.Transport Transports = 14;

        enum Permissions {
                OWNER = 0;
                ADMIN = 1;
                ALL = 2;
        }
}


// GhostProfilesRequest - Get Configs of previously built ghosts
message GhostProfilesRequest {}

// GhostProfiles - Configs of previously built ghosts
message GhostProfiles {
        GhostBuild Profiles = 1;
}

// BuildGhostRequest - Get Configs of previously built ghosts
message BuildGhostRequest {
        GhostBuild Profile = 1;
}

// BuildGhost - Configs of previously built ghosts
message BuildGhost {}

// ConsoleBuild - A console compilation profile.
message ConsoleBuild {
        bool Obfuscated = 1;
        bool SendBack = 2;      // Do we send the executable back to the console compiling it ?
}
// BuildConsoleRequest - Get Configs of previously built ghosts
message BuildConsoleRequest {}

// BuildConsole - Configs of previously built ghosts
message BuildConsole {}
