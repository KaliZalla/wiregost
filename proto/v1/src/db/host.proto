// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package db;

option go_package = "dbpb";

import "db/address.proto";
import "db/port.proto";
import "db/os.proto";
import "scanner/nmap.proto";
import "google/protobuf/timestamp.proto";

// The host object is shared by many tools: implants, nmap, db, etc.
// Each tool needs only certain fields.

// @inject_tag: tag:"value"
// - XML (Nmap)
// - GORM (DB)

// Host - Represents a remote computer host in DB
message Host {
        // General 
        uint32 ID = 1;
        // @inject_tag: gorm:"not null" 
        uint32 WorkspaceID = 2;
        string MAC = 3;
        string Comm = 4;
        string OSName = 5;
        string OSFlavor = 6;
        string OSSp = 7;
        string OSLang = 8;
        string OSFamily = 9;
        string Arch = 10;
        string Purpose = 11;
        string Info = 12;
        string Scope = 13;
        string VirtualHost = 14;
        repeated Address Addresses = 15;
        repeated string Users = 16;
        uint32 IPNetworkID = 17;                // Might belong to a given subnet
        
        // Nmap
        // @inject_tag: xml:"hostnames>hostname"
        repeated Hostname Hostnames = 34;
        // @inject_tag: xml:"ports>port"
        repeated db.Port Ports = 36;
        // @inject_tag: xml:"ports>extraports"
        repeated db.ExtraPort ExtraPorts = 33;
        // @inject_tag: xml:"os"
        OS OS = 24; 
        // @inject_tag: xml:"status"
        db.PortStatus Status = 32;
        // @inject_tag: xml:"distance"
        Distance Distance = 20;
        // @inject_tag: xml:"endtime,attr,omitempty"
        google.protobuf.Timestamp EndTime = 22;         // Might have issues here with XML unmarshalling
        // @inject_tag: xml:"ipidsequence"
        scanner.IPIDSequence IPIDSequence = 23;
        // @inject_tag: xml:"tcpsequence"
        scanner.TCPSequence TCPSequence = 25;
        // @inject_tag: xml:"tcptssequence"
        scanner.TCPTSSequence TCPTSSequence = 26;
        // @inject_tag: xml:"times"
        scanner.Times Times = 27;
        // @inject_tag: xml:"trace"
        scanner.Trace Trace = 28;
        // @inject_tag: xml:"uptime"
        Uptime Uptime = 29;
        // @inject_tag: xml:"comment,attr"
        string Comment = 30;
        // @inject_tag: xml:"starttime,attr,omitempty"
        google.protobuf.Timestamp StartTime = 31;
        // @inject_tag: xml:"hostscript>script"
        repeated scanner.NmapScript HostScripts = 35;
        // @inject_tag: xml:"smurf"
        repeated scanner.Smurf Smurfs = 37;

        google.protobuf.Timestamp CreatedAt = 38;
        google.protobuf.Timestamp UpdatedAt = 39;
}

// A hostname for a host.
message Hostname {
        uint32 ID = 1;
        // @inject_tag: gorm:"not null"
        uint32 HostID = 2;
        string Name = 3;
        string Type = 4;
}

// Distance - The number of hops before reaching the host
message Distance {
        // @inject_tag: xml:"value,attr"
        int32 Value = 1;
}

// Uptime - The amount of time the host has been up
message Uptime {
        // @inject_tag: xml:"seconds,attr"
        int32 Seconds = 1;
        // @inject_tag: xml:"lastboot,attr"
        string LastBoot = 2;
}
