// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package db;

option go_package = "dbpb";

import "db/service.proto";
import "scanner/nmap.proto";
import "google/protobuf/timestamp.proto";

// Port - A port on a host
message Port {
        // General
        uint32 ID = 1;
        uint32 Number = 2;
        uint32 HostID = 3;
        // Nmap
        // @inject_tag: xml:"protocol"
        string Protocol = 4;
        // @inject_tag: xml:"owner"
        Owner Owner = 5;
        // @inject_tag: xml:"service"
        db.Service Service = 6;
        // @inject_tag: xml:"state"
        State State = 7;
        // @inject_tag: xml:"script"
        repeated scanner.NmapScript Scripts = 8;
        // Timestamp
        google.protobuf.Timestamp CreatedAt = 38;
        google.protobuf.Timestamp UpdatedAt = 39;
}


// ExtraPort - Reasons for why a port is closed/filtered
message ExtraPort {
        uint32 ID = 1;
        uint32 HostID = 2;
        // @inject_tag: xml:"state"
        string State = 3;
        // @inject_tag: xml:"count"
        int32 Count = 4;
        // @inject_tag: xml:"extrareasons"
        repeated Reason Reasons = 5;
}

// Reason - Extra information on a closed/filtered port
message Reason {
        uint32 ID = 1;
        uint32 ExtraPortID = 2;
        // @inject_tag: xml:"reason"
        string Reason = 3;
        // @inject_tag: xml:"count"
        int32 Count = 4;
}

// PortStatus - Port state constants
enum PortStatus {
        Open = 0;
        Closed = 1;  
        Filtered = 2;
        Unfiltered = 3;
}

// State - Contains information about a given's port status
message State {
        uint32 ID = 1;
        uint32 PortID = 2;
        // Nmap
        // @inject_tag: xml:"state,attr"
        string State = 3;
        // @inject_tag: xml:"reason,attr"
        string Reason = 4;
        // @inject_tag: xml:"reason_ip,attr"
        string ReasonIP = 5;
        // @inject_tag: xml:"reason_ttl,attr"
        float ReasonTTL = 6;
        // Timestamp
        google.protobuf.Timestamp CreatedAt = 38;
        google.protobuf.Timestamp UpdatedAt = 39;
}

message Owner {
                
}
