// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package scanner;

option go_package = "scannerpb";

import "google/protobuf/timestamp.proto";
// import "db/host.proto";

// This file contains all objects needed by Nmap for :
// - Giving information about an ongoing scan
// - Parsing its results


// NmapScan - Represents a Nmap scan before, after or while being run. 
// As long as we cannot import db.Host objects (circular imports), we will
// declare a similar NmapScan type in the Go code, and use it when needed.
message NmapScan {
       // XMLName xml.Name

       string Args = 1;
       string ProfileName = 2;
       string Scanner = 3;
       string StartStr = 4;
       string Version = 5;
       string XMLOutputVersion = 6;
       Debugging Debugging = 7;
       Stats Stats = 8;
       ScanInfo ScanInfo = 9;
       google.protobuf.Timestamp Start = 10;
       Verbose Verbose = 11;
       // repeated db.Host Hosts = 12;          // Forbidden: circular imports
       repeated NmapScript PreScripts = 13;
       repeated NmapScript PostScripts = 14;
       repeated Target Targets = 15;
       repeated Task TaskBegin = 16;
       repeated TaskProgress TaskProgress = 17;
       repeated Task TaskEnd = 18;

       repeated string NmapErrors = 20;
       bytes rawXML = 30;
}

message ScanInfo {
        // @inject_tag: xml:"numservices,attr"
        int32 NumServices = 1;
        // @inject_tag: xml:"protocol,attr"
        string Protocol = 2;
        // @inject_tag: xml:"scanflags,attr"
        string ScanFlags = 3;
        // @inject_tag: xml:"services,attr"
        string Services = 4;
        // @inject_tag: xml:"type,attr"
        string Type = 5;
}

// Verbose - Contains the verbosity level of the scan
message Verbose {
        // @inject_tag: xml:"level,attr"
        int32 Level = 1;
}

// Debugging - Contains the debugging level of the scan
message Debugging {
        // @inject_tag: xml:"level,attr"
        int32 Level = 1;
}

// Task - Information about a task
message Task {
        // @inject_tag: xml:"time,attr"
        google.protobuf.Timestamp Time = 5;
        // @inject_tag: xml:"task,attr"
        string Task = 2;
        // @inject_tag: xml:"extrainfo,attr"
        string ExtraInfo = 3;
}

// TaskProgress - Progression of a task
message TaskProgress {
        // @inject_tag: xml:"percent,attr"
        float Percent = 1;
        // @inject_tag: xml:"remaining,attr"
        int32 Remaining = 2;
        // @inject_tag: xml:"task,attr"
        string Task = 3;
        // @inject_tag: xml:"etc,attr"
        google.protobuf.Timestamp Etc = 4;
        // @inject_tag: xml:"time,attr"
        google.protobuf.Timestamp Time = 5;
}

// Target - Represents a target, how it was specified when passed to nmap,
// its status and the reason of its status. Example:
// <target specification="domain.does.not.exist" status="skipped" reason="invalid"/>
message Target {
        // @inject_tag: xml:"specification,attr"
        string Specification = 1;
        // @inject_tag: xml:"status,attr"
        string Status = 2;
        // @inject_tag: xml:"reason,attr"
        string Reason = 3;
}

// Stats - Contains statistics for a Nmap scan
message Stats {
        // @inject_tag: xml:"finished"
        Finished Finished = 1;
        // @inject_tag: xml:"hosts"
        HostStats Hosts = 2;
}

message Finished {
        // @inject_tag: xml:"time,attr"
        google.protobuf.Timestamp Time = 1;
        // @inject_tag: xml:"timestr,attr"
        string TimeStr = 2;
        // @inject_tag: xml:"elapsed,attr"
        float Elapsed = 3;
        // @inject_tag: xml:"summary,attr"
        string Summary = 4;
        // @inject_tag: xml:"exit,attr"
        string Exit = 5;
        // @inject_tag: xml:"errormsg,attr"
        string ErrorMsg = 6;
}

// Host - Contains the amount of up/down hosts and total count
message HostStats {
        // @inject_tag: xml:"up,attr"
        int32 Up = 1;
        // @inject_tag: xml:"down,attr"
        int32 Down = 2;
        // @inject_tag: xml:"total,attr"
        int32 Total = 3;
}

// NmapScript - Represents a Nmap Scripting Engine Script.
// The inner elements can be an arbitrary collection of Tables and Elements. They can be empty
message NmapScript {
        // General
        uint32 ID = 1;
        uint32 PortID = 2;
        // @inject_tag: xml:"output,attr"
        string Output = 3;
        // @inject_tag: xml:"elem,omitempty"
        repeated Element Elements = 4;
        // @inject_tag: xml:"table,omitempty"
        repeated Table Tables = 5;
        // Timestamp
        google.protobuf.Timestamp CreatedAt = 38;
        google.protobuf.Timestamp UpdatedAt = 39;
}

// elements - The smallest building block for scripts/tables. Key is optional
message Element {
        // @inject_tag: xml:"key,attr,omitempty"
        string Key = 1;
        // @inject_tag: xml:",innerxml"
        string Value = 2;
}

// Table - An arbitrary collection of (sub-)Tables and Elements. Can be empty
message Table {
        // @inject_tag: xml:"key,attr,omitempty"
        string Key = 1;
        // @inject_tag: xml:"table,omitempty"
        repeated Table Tables = 2;
        // @inject_tag: xml:"elem,omitempty"
        repeated Element Elements = 3;
}

// Sequence - 
message Sequence {
        // @inject_tag: xml:"class,attr"
        string Class = 1;
        // @inject_tag: xml:"values,attr"
        string Values = 2;
}

// TCPSequence - Represents a detected TCP Sequence
message TCPSequence {
        // @inject_tag: xml:"index,attr"
        int32 Index = 1; 
        // @inject_tag: xml:"difficulty,attr"
        string Difficulty = 2;
        // @inject_tag: xml:"values,attr"
        string Values = 3;
}

// IPIDSequence - Represents a detected IP ID Sequence
message IPIDSequence {
        // @inject_tag: xml:"index,attr"
        int32 Index = 1; 
        // @inject_tag: xml:"difficulty,attr"
        string Difficulty = 2;
        // @inject_tag: xml:"values,attr"
        string Values = 3;
}

// TCPTSSequence - Represents a detected TCP TS Sequence
message TCPTSSequence {
        // @inject_tag: xml:"index,attr"
        int32 Index = 1; 
        // @inject_tag: xml:"difficulty,attr"
        string Difficulty = 2;
        // @inject_tag: xml:"values,attr"
        string Values = 3;
}

// Times - Contains time statistics for a Nmap scan
message Times {
        // @inject_tag: xml:"srtt,attr"
        string SRTT = 1;
        // @inject_tag: xml:"rttvar,attr"
        string RTT = 2;
        // @inject_tag: xml:"to,attr"
        string To = 3;
}

// Trace - Represents the trace to a host, including the hops
message Trace {
        // @inject_tag: xml:"proto,attr"
        string Protocol = 1;
        // @inject_tag: xml:"port,attr"
        int32 Port = 2;
        // @inject_tag: xml:"hop"
        repeated Hop Hops = 3;
}

// Hop - An IP hop to a host
message Hop {
        // @inject_tag: xml:"ttl,attr"
        float TTL = 1;
        // @inject_tag: xml:"rtt,attr"
        string RTT = 2;
        // @inject_tag: xml:"ipaddr,attr"
        string IPAddr = 3;
        // @inject_tag: xml:"host,attr"
        string Host = 4;
}

// Smurf - COntains responses from a smurf attack
message Smurf {
        // @inject_tag: xml:"responses,attr"
        string Responses = 1;
}
