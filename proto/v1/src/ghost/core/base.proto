// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package ghost.core;

option go_package = "corepb";

import "transport/transport.proto";
import "ghost/core/net.proto";
import "transport/route/route.proto";

// Info - Send back multiple informations to the server at once.
message Info {

        string Name = 1;
        string Username = 3;                          
        string UID = 4;
        string GID = 5;
        string OS = 6;
        string Arch = 7;
        int32 PID = 8;
        string Filename = 9;
        string Version = 10;
        uint32 WorkspaceID = 12; 

        repeated transport.Transport Transports = 14;       // Available C2 transports
        repeated ghost.core.NetInterface Interfaces = 15;   // Network
        repeated ghost.core.SocketTabEntry Netstat = 18;    // Maybe we can use this to automatically devise some better ports to use for routing/etc
        repeated transport.route.Route Routes = 19;         // We might send current route listeners, in case.
        Environment Environment = 20;                       // Environment variables
}

// Register - Implant calls back to C2 Server and sends its information.
message Register {
        Info Information = 1;
}

// Ping - Test ghost connection
message Ping {
        int32 Nonce = 1;
}

// KillRequest - Kills the ghost executable and connection 
message KillRequest {
        uint32 GhostID = 1;
        bool Force = 2;
} 

// Kill - Sends back status on implant kill
message Kill {
        bool Success = 1;
        string Warning = 2; // If force kill, will kill anyway but send a warning instead of an error
        string Err = 3;     // Sends an error if kill was not force and there things still running
}


// Environment - Provides the set of Environment variables on a remote host
message Environment {
        uint32 HostID = 1;              // Maybe a bit of OS info can be useful
        string OSName = 2;
        string OSSp = 3;
        map<string, string> Vars = 4;   // Actual variables
}
