// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.8.0
// source: scanner/nmap.proto

package scannerpb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// NmapScan - Represents a Nmap scan before, after or while being run.
type NmapScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args             string               `protobuf:"bytes,1,opt,name=Args,proto3" json:"Args,omitempty"`
	ProfileName      string               `protobuf:"bytes,2,opt,name=ProfileName,proto3" json:"ProfileName,omitempty"`
	Scanner          string               `protobuf:"bytes,3,opt,name=Scanner,proto3" json:"Scanner,omitempty"`
	StartStr         string               `protobuf:"bytes,4,opt,name=StartStr,proto3" json:"StartStr,omitempty"`
	Version          string               `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	XMLOutputVersion string               `protobuf:"bytes,6,opt,name=XMLOutputVersion,proto3" json:"XMLOutputVersion,omitempty"`
	Debugging        *Debugging           `protobuf:"bytes,7,opt,name=Debugging,proto3" json:"Debugging,omitempty"`
	Stats            *Stats               `protobuf:"bytes,8,opt,name=Stats,proto3" json:"Stats,omitempty"`
	ScanInfo         *ScanInfo            `protobuf:"bytes,9,opt,name=ScanInfo,proto3" json:"ScanInfo,omitempty"`
	Start            *timestamp.Timestamp `protobuf:"bytes,10,opt,name=Start,proto3" json:"Start,omitempty"`
	Verbose          *Verbose             `protobuf:"bytes,11,opt,name=Verbose,proto3" json:"Verbose,omitempty"`
	// repeated db.Host Hosts = 12;          // Forbidden: circular imports
	PreScripts   []*NmapScript   `protobuf:"bytes,13,rep,name=PreScripts,proto3" json:"PreScripts,omitempty"`
	PostScripts  []*NmapScript   `protobuf:"bytes,14,rep,name=PostScripts,proto3" json:"PostScripts,omitempty"`
	Targets      []*Target       `protobuf:"bytes,15,rep,name=Targets,proto3" json:"Targets,omitempty"`
	TaskBegin    []*Task         `protobuf:"bytes,16,rep,name=TaskBegin,proto3" json:"TaskBegin,omitempty"`
	TaskProgress []*TaskProgress `protobuf:"bytes,17,rep,name=TaskProgress,proto3" json:"TaskProgress,omitempty"`
	TaskEnd      []*Task         `protobuf:"bytes,18,rep,name=TaskEnd,proto3" json:"TaskEnd,omitempty"`
	NmapErrors   []string        `protobuf:"bytes,20,rep,name=NmapErrors,proto3" json:"NmapErrors,omitempty"`
	RawXML       [][]byte        `protobuf:"bytes,30,rep,name=rawXML,proto3" json:"rawXML,omitempty"`
}

func (x *NmapScan) Reset() {
	*x = NmapScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmapScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmapScan) ProtoMessage() {}

func (x *NmapScan) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmapScan.ProtoReflect.Descriptor instead.
func (*NmapScan) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{0}
}

func (x *NmapScan) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *NmapScan) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *NmapScan) GetScanner() string {
	if x != nil {
		return x.Scanner
	}
	return ""
}

func (x *NmapScan) GetStartStr() string {
	if x != nil {
		return x.StartStr
	}
	return ""
}

func (x *NmapScan) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NmapScan) GetXMLOutputVersion() string {
	if x != nil {
		return x.XMLOutputVersion
	}
	return ""
}

func (x *NmapScan) GetDebugging() *Debugging {
	if x != nil {
		return x.Debugging
	}
	return nil
}

func (x *NmapScan) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *NmapScan) GetScanInfo() *ScanInfo {
	if x != nil {
		return x.ScanInfo
	}
	return nil
}

func (x *NmapScan) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *NmapScan) GetVerbose() *Verbose {
	if x != nil {
		return x.Verbose
	}
	return nil
}

func (x *NmapScan) GetPreScripts() []*NmapScript {
	if x != nil {
		return x.PreScripts
	}
	return nil
}

func (x *NmapScan) GetPostScripts() []*NmapScript {
	if x != nil {
		return x.PostScripts
	}
	return nil
}

func (x *NmapScan) GetTargets() []*Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *NmapScan) GetTaskBegin() []*Task {
	if x != nil {
		return x.TaskBegin
	}
	return nil
}

func (x *NmapScan) GetTaskProgress() []*TaskProgress {
	if x != nil {
		return x.TaskProgress
	}
	return nil
}

func (x *NmapScan) GetTaskEnd() []*Task {
	if x != nil {
		return x.TaskEnd
	}
	return nil
}

func (x *NmapScan) GetNmapErrors() []string {
	if x != nil {
		return x.NmapErrors
	}
	return nil
}

func (x *NmapScan) GetRawXML() [][]byte {
	if x != nil {
		return x.RawXML
	}
	return nil
}

type ScanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"numservices,attr"
	NumServices int32 `protobuf:"varint,1,opt,name=NumServices,proto3" json:"NumServices,omitempty" xml:"numservices,attr"`
	// @inject_tag: xml:"protocol,attr"
	Protocol string `protobuf:"bytes,2,opt,name=Protocol,proto3" json:"Protocol,omitempty" xml:"protocol,attr"`
	// @inject_tag: xml:"scanflags,attr"
	ScanFlags string `protobuf:"bytes,3,opt,name=ScanFlags,proto3" json:"ScanFlags,omitempty" xml:"scanflags,attr"`
	// @inject_tag: xml:"services,attr"
	Services string `protobuf:"bytes,4,opt,name=Services,proto3" json:"Services,omitempty" xml:"services,attr"`
	// @inject_tag: xml:"type,attr"
	Type string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty" xml:"type,attr"`
}

func (x *ScanInfo) Reset() {
	*x = ScanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanInfo) ProtoMessage() {}

func (x *ScanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanInfo.ProtoReflect.Descriptor instead.
func (*ScanInfo) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{1}
}

func (x *ScanInfo) GetNumServices() int32 {
	if x != nil {
		return x.NumServices
	}
	return 0
}

func (x *ScanInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ScanInfo) GetScanFlags() string {
	if x != nil {
		return x.ScanFlags
	}
	return ""
}

func (x *ScanInfo) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *ScanInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Verbose - Contains the verbosity level of the scan
type Verbose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"level,attr"
	Level int32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty" xml:"level,attr"`
}

func (x *Verbose) Reset() {
	*x = Verbose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verbose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verbose) ProtoMessage() {}

func (x *Verbose) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verbose.ProtoReflect.Descriptor instead.
func (*Verbose) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{2}
}

func (x *Verbose) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Debugging - Contains the debugging level of the scan
type Debugging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"level,attr"
	Level int32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty" xml:"level,attr"`
}

func (x *Debugging) Reset() {
	*x = Debugging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Debugging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Debugging) ProtoMessage() {}

func (x *Debugging) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Debugging.ProtoReflect.Descriptor instead.
func (*Debugging) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{3}
}

func (x *Debugging) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// Task - Information about a task
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"time,attr"
	Time *timestamp.Timestamp `protobuf:"bytes,5,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
	// @inject_tag: xml:"task,attr"
	Task string `protobuf:"bytes,2,opt,name=Task,proto3" json:"Task,omitempty" xml:"task,attr"`
	// @inject_tag: xml:"extrainfo,attr"
	ExtraInfo string `protobuf:"bytes,3,opt,name=ExtraInfo,proto3" json:"ExtraInfo,omitempty" xml:"extrainfo,attr"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Task) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *Task) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

// TaskProgress - Progression of a task
type TaskProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"percent,attr"
	Percent float32 `protobuf:"fixed32,1,opt,name=Percent,proto3" json:"Percent,omitempty" xml:"percent,attr"`
	// @inject_tag: xml:"remaining,attr"
	Remaining int32 `protobuf:"varint,2,opt,name=Remaining,proto3" json:"Remaining,omitempty" xml:"remaining,attr"`
	// @inject_tag: xml:"task,attr"
	Task string `protobuf:"bytes,3,opt,name=Task,proto3" json:"Task,omitempty" xml:"task,attr"`
	// @inject_tag: xml:"etc,attr"
	Etc *timestamp.Timestamp `protobuf:"bytes,4,opt,name=Etc,proto3" json:"Etc,omitempty" xml:"etc,attr"`
	// @inject_tag: xml:"time,attr"
	Time *timestamp.Timestamp `protobuf:"bytes,5,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
}

func (x *TaskProgress) Reset() {
	*x = TaskProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgress) ProtoMessage() {}

func (x *TaskProgress) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgress.ProtoReflect.Descriptor instead.
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{5}
}

func (x *TaskProgress) GetPercent() float32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *TaskProgress) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *TaskProgress) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskProgress) GetEtc() *timestamp.Timestamp {
	if x != nil {
		return x.Etc
	}
	return nil
}

func (x *TaskProgress) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// Target - Represents a target, how it was specified when passed to nmap,
// its status and the reason of its status. Example:
// <target specification="domain.does.not.exist" status="skipped" reason="invalid"/>
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"specification,attr"
	Specification string `protobuf:"bytes,1,opt,name=Specification,proto3" json:"Specification,omitempty" xml:"specification,attr"`
	// @inject_tag: xml:"status,attr"
	Status string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty" xml:"status,attr"`
	// @inject_tag: xml:"reason,attr"
	Reason string `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty" xml:"reason,attr"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{6}
}

func (x *Target) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *Target) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Target) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Stats - Contains statistics for a Nmap scan
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"finished"
	Finished *Finished `protobuf:"bytes,1,opt,name=Finished,proto3" json:"Finished,omitempty" xml:"finished"`
	// @inject_tag: xml:"hosts"
	Hosts *HostStats `protobuf:"bytes,2,opt,name=Hosts,proto3" json:"Hosts,omitempty" xml:"hosts"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{7}
}

func (x *Stats) GetFinished() *Finished {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *Stats) GetHosts() *HostStats {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type Finished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"time,attr"
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty" xml:"time,attr"`
	// @inject_tag: xml:"timestr,attr"
	TimeStr string `protobuf:"bytes,2,opt,name=TimeStr,proto3" json:"TimeStr,omitempty" xml:"timestr,attr"`
	// @inject_tag: xml:"elapsed,attr"
	Elapsed float32 `protobuf:"fixed32,3,opt,name=Elapsed,proto3" json:"Elapsed,omitempty" xml:"elapsed,attr"`
	// @inject_tag: xml:"summary,attr"
	Summary string `protobuf:"bytes,4,opt,name=Summary,proto3" json:"Summary,omitempty" xml:"summary,attr"`
	// @inject_tag: xml:"exit,attr"
	Exit string `protobuf:"bytes,5,opt,name=Exit,proto3" json:"Exit,omitempty" xml:"exit,attr"`
	// @inject_tag: xml:"errormsg,attr"
	ErrorMsg string `protobuf:"bytes,6,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty" xml:"errormsg,attr"`
}

func (x *Finished) Reset() {
	*x = Finished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finished) ProtoMessage() {}

func (x *Finished) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finished.ProtoReflect.Descriptor instead.
func (*Finished) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{8}
}

func (x *Finished) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Finished) GetTimeStr() string {
	if x != nil {
		return x.TimeStr
	}
	return ""
}

func (x *Finished) GetElapsed() float32 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *Finished) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Finished) GetExit() string {
	if x != nil {
		return x.Exit
	}
	return ""
}

func (x *Finished) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// Host - Contains the amount of up/down hosts and total count
type HostStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"up,attr"
	Up int32 `protobuf:"varint,1,opt,name=Up,proto3" json:"Up,omitempty" xml:"up,attr"`
	// @inject_tag: xml:"down,attr"
	Down int32 `protobuf:"varint,2,opt,name=Down,proto3" json:"Down,omitempty" xml:"down,attr"`
	// @inject_tag: xml:"total,attr"
	Total int32 `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty" xml:"total,attr"`
}

func (x *HostStats) Reset() {
	*x = HostStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostStats) ProtoMessage() {}

func (x *HostStats) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostStats.ProtoReflect.Descriptor instead.
func (*HostStats) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{9}
}

func (x *HostStats) GetUp() int32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *HostStats) GetDown() int32 {
	if x != nil {
		return x.Down
	}
	return 0
}

func (x *HostStats) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// NmapScript - Represents a Nmap Scripting Engine Script.
// The inner elements can be an arbitrary collection of Tables and Elements. They can be empty
type NmapScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General
	ID     uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PortID uint32 `protobuf:"varint,2,opt,name=PortID,proto3" json:"PortID,omitempty"`
	// @inject_tag: xml:"output,attr"
	Output string `protobuf:"bytes,3,opt,name=Output,proto3" json:"Output,omitempty" xml:"output,attr"`
	// @inject_tag: xml:"elem,omitempty"
	Elements []*Element `protobuf:"bytes,4,rep,name=Elements,proto3" json:"Elements,omitempty" xml:"elem,omitempty"`
	// @inject_tag: xml:"table,omitempty"
	Tables []*Table `protobuf:"bytes,5,rep,name=Tables,proto3" json:"Tables,omitempty" xml:"table,omitempty"`
	// Timestamp
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,38,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,39,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *NmapScript) Reset() {
	*x = NmapScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NmapScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmapScript) ProtoMessage() {}

func (x *NmapScript) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmapScript.ProtoReflect.Descriptor instead.
func (*NmapScript) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{10}
}

func (x *NmapScript) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *NmapScript) GetPortID() uint32 {
	if x != nil {
		return x.PortID
	}
	return 0
}

func (x *NmapScript) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *NmapScript) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *NmapScript) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *NmapScript) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NmapScript) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// elements - The smallest building block for scripts/tables. Key is optional
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"key,attr,omitempty"
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty" xml:"key,attr,omitempty"`
	// @inject_tag: xml:",innerxml"
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty" xml:",innerxml"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{11}
}

func (x *Element) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Element) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Table - An arbitrary collection of (sub-)Tables and Elements. Can be empty
type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"key,attr,omitempty"
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty" xml:"key,attr,omitempty"`
	// @inject_tag: xml:"table,omitempty"
	Tables []*Table `protobuf:"bytes,2,rep,name=Tables,proto3" json:"Tables,omitempty" xml:"table,omitempty"`
	// @inject_tag: xml:"elem,omitempty"
	Elements []*Element `protobuf:"bytes,3,rep,name=Elements,proto3" json:"Elements,omitempty" xml:"elem,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{12}
}

func (x *Table) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Table) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *Table) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

// Sequence -
type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"class,attr"
	Class string `protobuf:"bytes,1,opt,name=Class,proto3" json:"Class,omitempty" xml:"class,attr"`
	// @inject_tag: xml:"values,attr"
	Values string `protobuf:"bytes,2,opt,name=Values,proto3" json:"Values,omitempty" xml:"values,attr"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{13}
}

func (x *Sequence) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Sequence) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

// TCPSequence - Represents a detected TCP Sequence
type TCPSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"index,attr"
	Index int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty" xml:"index,attr"`
	// @inject_tag: xml:"difficulty,attr"
	Difficulty string `protobuf:"bytes,2,opt,name=Difficulty,proto3" json:"Difficulty,omitempty" xml:"difficulty,attr"`
	// @inject_tag: xml:"values,attr"
	Values string `protobuf:"bytes,3,opt,name=Values,proto3" json:"Values,omitempty" xml:"values,attr"`
}

func (x *TCPSequence) Reset() {
	*x = TCPSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPSequence) ProtoMessage() {}

func (x *TCPSequence) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPSequence.ProtoReflect.Descriptor instead.
func (*TCPSequence) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{14}
}

func (x *TCPSequence) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TCPSequence) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *TCPSequence) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

// IPIDSequence - Represents a detected IP ID Sequence
type IPIDSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"index,attr"
	Index int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty" xml:"index,attr"`
	// @inject_tag: xml:"difficulty,attr"
	Difficulty string `protobuf:"bytes,2,opt,name=Difficulty,proto3" json:"Difficulty,omitempty" xml:"difficulty,attr"`
	// @inject_tag: xml:"values,attr"
	Values string `protobuf:"bytes,3,opt,name=Values,proto3" json:"Values,omitempty" xml:"values,attr"`
}

func (x *IPIDSequence) Reset() {
	*x = IPIDSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPIDSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPIDSequence) ProtoMessage() {}

func (x *IPIDSequence) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPIDSequence.ProtoReflect.Descriptor instead.
func (*IPIDSequence) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{15}
}

func (x *IPIDSequence) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *IPIDSequence) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *IPIDSequence) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

// TCPTSSequence - Represents a detected TCP TS Sequence
type TCPTSSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"index,attr"
	Index int32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty" xml:"index,attr"`
	// @inject_tag: xml:"difficulty,attr"
	Difficulty string `protobuf:"bytes,2,opt,name=Difficulty,proto3" json:"Difficulty,omitempty" xml:"difficulty,attr"`
	// @inject_tag: xml:"values,attr"
	Values string `protobuf:"bytes,3,opt,name=Values,proto3" json:"Values,omitempty" xml:"values,attr"`
}

func (x *TCPTSSequence) Reset() {
	*x = TCPTSSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPTSSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPTSSequence) ProtoMessage() {}

func (x *TCPTSSequence) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPTSSequence.ProtoReflect.Descriptor instead.
func (*TCPTSSequence) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{16}
}

func (x *TCPTSSequence) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TCPTSSequence) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *TCPTSSequence) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

// Times - Contains time statistics for a Nmap scan
type Times struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"srtt,attr"
	SRTT string `protobuf:"bytes,1,opt,name=SRTT,proto3" json:"SRTT,omitempty" xml:"srtt,attr"`
	// @inject_tag: xml:"rttvar,attr"
	RTT string `protobuf:"bytes,2,opt,name=RTT,proto3" json:"RTT,omitempty" xml:"rttvar,attr"`
	// @inject_tag: xml:"to,attr"
	To string `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty" xml:"to,attr"`
}

func (x *Times) Reset() {
	*x = Times{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Times) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Times) ProtoMessage() {}

func (x *Times) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Times.ProtoReflect.Descriptor instead.
func (*Times) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{17}
}

func (x *Times) GetSRTT() string {
	if x != nil {
		return x.SRTT
	}
	return ""
}

func (x *Times) GetRTT() string {
	if x != nil {
		return x.RTT
	}
	return ""
}

func (x *Times) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

// Trace - Represents the trace to a host, including the hops
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"proto,attr"
	Protocol string `protobuf:"bytes,1,opt,name=Protocol,proto3" json:"Protocol,omitempty" xml:"proto,attr"`
	// @inject_tag: xml:"port,attr"
	Port int32 `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty" xml:"port,attr"`
	// @inject_tag: xml:"hop"
	Hops []*Hop `protobuf:"bytes,3,rep,name=Hops,proto3" json:"Hops,omitempty" xml:"hop"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{18}
}

func (x *Trace) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Trace) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Trace) GetHops() []*Hop {
	if x != nil {
		return x.Hops
	}
	return nil
}

// Hop - An IP hop to a host
type Hop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"ttl,attr"
	TTL float32 `protobuf:"fixed32,1,opt,name=TTL,proto3" json:"TTL,omitempty" xml:"ttl,attr"`
	// @inject_tag: xml:"rtt,attr"
	RTT string `protobuf:"bytes,2,opt,name=RTT,proto3" json:"RTT,omitempty" xml:"rtt,attr"`
	// @inject_tag: xml:"ipaddr,attr"
	IPAddr string `protobuf:"bytes,3,opt,name=IPAddr,proto3" json:"IPAddr,omitempty" xml:"ipaddr,attr"`
	// @inject_tag: xml:"host,attr"
	Host string `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty" xml:"host,attr"`
}

func (x *Hop) Reset() {
	*x = Hop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hop) ProtoMessage() {}

func (x *Hop) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hop.ProtoReflect.Descriptor instead.
func (*Hop) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{19}
}

func (x *Hop) GetTTL() float32 {
	if x != nil {
		return x.TTL
	}
	return 0
}

func (x *Hop) GetRTT() string {
	if x != nil {
		return x.RTT
	}
	return ""
}

func (x *Hop) GetIPAddr() string {
	if x != nil {
		return x.IPAddr
	}
	return ""
}

func (x *Hop) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Smurf - COntains responses from a smurf attack
type Smurf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: xml:"responses,attr"
	Responses string `protobuf:"bytes,1,opt,name=Responses,proto3" json:"Responses,omitempty" xml:"responses,attr"`
}

func (x *Smurf) Reset() {
	*x = Smurf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_nmap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Smurf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Smurf) ProtoMessage() {}

func (x *Smurf) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_nmap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Smurf.ProtoReflect.Descriptor instead.
func (*Smurf) Descriptor() ([]byte, []int) {
	return file_scanner_nmap_proto_rawDescGZIP(), []int{20}
}

func (x *Smurf) GetResponses() string {
	if x != nil {
		return x.Responses
	}
	return ""
}

var File_scanner_nmap_proto protoreflect.FileDescriptor

var file_scanner_nmap_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x6e, 0x6d, 0x61, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81,
	0x06, 0x0a, 0x08, 0x4e, 0x6d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x58, 0x4d, 0x4c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x58, 0x4d, 0x4c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x53, 0x63, 0x61, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x4e, 0x6d, 0x61, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x50, 0x72, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4e, 0x6d, 0x61, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x52, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x6d,
	0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x4e, 0x6d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x77, 0x58, 0x4d, 0x4c, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x61, 0x77, 0x58,
	0x4d, 0x4c, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x63, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x21, 0x0a, 0x09,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x68, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x03, 0x45, 0x74, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x45, 0x74, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x05,
	0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73,
	0x67, 0x22, 0x45, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x55, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x55, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x6f,
	0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x96, 0x02, 0x0a, 0x0a, 0x4e, 0x6d, 0x61,
	0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x31, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x5b, 0x0a, 0x0b, 0x54, 0x43, 0x50, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0c,
	0x49, 0x50, 0x49, 0x44, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x54, 0x43,
	0x50, 0x54, 0x53, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x05, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x52, 0x54, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x53, 0x52, 0x54, 0x54, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x54, 0x54, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x52, 0x54, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x22, 0x59, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x04, 0x48, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x48,
	0x6f, 0x70, 0x73, 0x22, 0x55, 0x0a, 0x03, 0x48, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x54,
	0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x54, 0x54, 0x4c, 0x12, 0x10, 0x0a, 0x03,
	0x52, 0x54, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x52, 0x54, 0x54, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x05, 0x53, 0x6d,
	0x75, 0x72, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x42, 0x0b, 0x5a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scanner_nmap_proto_rawDescOnce sync.Once
	file_scanner_nmap_proto_rawDescData = file_scanner_nmap_proto_rawDesc
)

func file_scanner_nmap_proto_rawDescGZIP() []byte {
	file_scanner_nmap_proto_rawDescOnce.Do(func() {
		file_scanner_nmap_proto_rawDescData = protoimpl.X.CompressGZIP(file_scanner_nmap_proto_rawDescData)
	})
	return file_scanner_nmap_proto_rawDescData
}

var file_scanner_nmap_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_scanner_nmap_proto_goTypes = []interface{}{
	(*NmapScan)(nil),            // 0: scanner.NmapScan
	(*ScanInfo)(nil),            // 1: scanner.ScanInfo
	(*Verbose)(nil),             // 2: scanner.Verbose
	(*Debugging)(nil),           // 3: scanner.Debugging
	(*Task)(nil),                // 4: scanner.Task
	(*TaskProgress)(nil),        // 5: scanner.TaskProgress
	(*Target)(nil),              // 6: scanner.Target
	(*Stats)(nil),               // 7: scanner.Stats
	(*Finished)(nil),            // 8: scanner.Finished
	(*HostStats)(nil),           // 9: scanner.HostStats
	(*NmapScript)(nil),          // 10: scanner.NmapScript
	(*Element)(nil),             // 11: scanner.Element
	(*Table)(nil),               // 12: scanner.Table
	(*Sequence)(nil),            // 13: scanner.Sequence
	(*TCPSequence)(nil),         // 14: scanner.TCPSequence
	(*IPIDSequence)(nil),        // 15: scanner.IPIDSequence
	(*TCPTSSequence)(nil),       // 16: scanner.TCPTSSequence
	(*Times)(nil),               // 17: scanner.Times
	(*Trace)(nil),               // 18: scanner.Trace
	(*Hop)(nil),                 // 19: scanner.Hop
	(*Smurf)(nil),               // 20: scanner.Smurf
	(*timestamp.Timestamp)(nil), // 21: google.protobuf.Timestamp
}
var file_scanner_nmap_proto_depIdxs = []int32{
	3,  // 0: scanner.NmapScan.Debugging:type_name -> scanner.Debugging
	7,  // 1: scanner.NmapScan.Stats:type_name -> scanner.Stats
	1,  // 2: scanner.NmapScan.ScanInfo:type_name -> scanner.ScanInfo
	21, // 3: scanner.NmapScan.Start:type_name -> google.protobuf.Timestamp
	2,  // 4: scanner.NmapScan.Verbose:type_name -> scanner.Verbose
	10, // 5: scanner.NmapScan.PreScripts:type_name -> scanner.NmapScript
	10, // 6: scanner.NmapScan.PostScripts:type_name -> scanner.NmapScript
	6,  // 7: scanner.NmapScan.Targets:type_name -> scanner.Target
	4,  // 8: scanner.NmapScan.TaskBegin:type_name -> scanner.Task
	5,  // 9: scanner.NmapScan.TaskProgress:type_name -> scanner.TaskProgress
	4,  // 10: scanner.NmapScan.TaskEnd:type_name -> scanner.Task
	21, // 11: scanner.Task.Time:type_name -> google.protobuf.Timestamp
	21, // 12: scanner.TaskProgress.Etc:type_name -> google.protobuf.Timestamp
	21, // 13: scanner.TaskProgress.Time:type_name -> google.protobuf.Timestamp
	8,  // 14: scanner.Stats.Finished:type_name -> scanner.Finished
	9,  // 15: scanner.Stats.Hosts:type_name -> scanner.HostStats
	21, // 16: scanner.Finished.Time:type_name -> google.protobuf.Timestamp
	11, // 17: scanner.NmapScript.Elements:type_name -> scanner.Element
	12, // 18: scanner.NmapScript.Tables:type_name -> scanner.Table
	21, // 19: scanner.NmapScript.CreatedAt:type_name -> google.protobuf.Timestamp
	21, // 20: scanner.NmapScript.UpdatedAt:type_name -> google.protobuf.Timestamp
	12, // 21: scanner.Table.Tables:type_name -> scanner.Table
	11, // 22: scanner.Table.Elements:type_name -> scanner.Element
	19, // 23: scanner.Trace.Hops:type_name -> scanner.Hop
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_scanner_nmap_proto_init() }
func file_scanner_nmap_proto_init() {
	if File_scanner_nmap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scanner_nmap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmapScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verbose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Debugging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NmapScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPIDSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPTSSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Times); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_nmap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Smurf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scanner_nmap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scanner_nmap_proto_goTypes,
		DependencyIndexes: file_scanner_nmap_proto_depIdxs,
		MessageInfos:      file_scanner_nmap_proto_msgTypes,
	}.Build()
	File_scanner_nmap_proto = out.File
	file_scanner_nmap_proto_rawDesc = nil
	file_scanner_nmap_proto_goTypes = nil
	file_scanner_nmap_proto_depIdxs = nil
}
