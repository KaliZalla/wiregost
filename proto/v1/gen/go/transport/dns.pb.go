// Wiregost - Golang Exploitation Framework
// Copyright Â© 2020 Para
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.8.0
// source: transport/dns.proto

package transportpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// StartDNSListenerRequest - Start a DNS listener for implant C2
type StartDNSListenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains  []string `protobuf:"bytes,1,rep,name=Domains,proto3" json:"Domains,omitempty"`
	Canaries bool     `protobuf:"varint,2,opt,name=Canaries,proto3" json:"Canaries,omitempty"`
}

func (x *StartDNSListenerRequest) Reset() {
	*x = StartDNSListenerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_dns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDNSListenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDNSListenerRequest) ProtoMessage() {}

func (x *StartDNSListenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_dns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDNSListenerRequest.ProtoReflect.Descriptor instead.
func (*StartDNSListenerRequest) Descriptor() ([]byte, []int) {
	return file_transport_dns_proto_rawDescGZIP(), []int{0}
}

func (x *StartDNSListenerRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *StartDNSListenerRequest) GetCanaries() bool {
	if x != nil {
		return x.Canaries
	}
	return false
}

type StartDNSListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool  `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	JobID   int32 `protobuf:"varint,2,opt,name=JobID,proto3" json:"JobID,omitempty"` // Job BackgroundJob = 3;           // Pass an entire job object.
}

func (x *StartDNSListener) Reset() {
	*x = StartDNSListener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_dns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDNSListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDNSListener) ProtoMessage() {}

func (x *StartDNSListener) ProtoReflect() protoreflect.Message {
	mi := &file_transport_dns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDNSListener.ProtoReflect.Descriptor instead.
func (*StartDNSListener) Descriptor() ([]byte, []int) {
	return file_transport_dns_proto_rawDescGZIP(), []int{1}
}

func (x *StartDNSListener) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartDNSListener) GetJobID() int32 {
	if x != nil {
		return x.JobID
	}
	return 0
}

// DNSSessionInit - Sends the key bytes for authentication.
type DNSSessionInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *DNSSessionInit) Reset() {
	*x = DNSSessionInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_dns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSSessionInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSSessionInit) ProtoMessage() {}

func (x *DNSSessionInit) ProtoReflect() protoreflect.Message {
	mi := &file_transport_dns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSSessionInit.ProtoReflect.Descriptor instead.
func (*DNSSessionInit) Descriptor() ([]byte, []int) {
	return file_transport_dns_proto_rawDescGZIP(), []int{2}
}

func (x *DNSSessionInit) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DNSPoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*DNSBlockHeader `protobuf:"bytes,1,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *DNSPoll) Reset() {
	*x = DNSPoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_dns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSPoll) ProtoMessage() {}

func (x *DNSPoll) ProtoReflect() protoreflect.Message {
	mi := &file_transport_dns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSPoll.ProtoReflect.Descriptor instead.
func (*DNSPoll) Descriptor() ([]byte, []int) {
	return file_transport_dns_proto_rawDescGZIP(), []int{3}
}

func (x *DNSPoll) GetBlocks() []*DNSBlockHeader {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type DNSBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
}

func (x *DNSBlockHeader) Reset() {
	*x = DNSBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_dns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSBlockHeader) ProtoMessage() {}

func (x *DNSBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_transport_dns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSBlockHeader.ProtoReflect.Descriptor instead.
func (*DNSBlockHeader) Descriptor() ([]byte, []int) {
	return file_transport_dns_proto_rawDescGZIP(), []int{4}
}

func (x *DNSBlockHeader) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DNSBlockHeader) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

var File_transport_dns_proto protoreflect.FileDescriptor

var file_transport_dns_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x4f, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x4e, 0x53, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x42, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x4e, 0x53, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4a, 0x6f, 0x62, 0x49, 0x44, 0x22, 0x22, 0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x07, 0x44, 0x4e, 0x53,
	0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x44, 0x4e, 0x53, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x34, 0x0a, 0x0e, 0x44, 0x4e, 0x53, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x5a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transport_dns_proto_rawDescOnce sync.Once
	file_transport_dns_proto_rawDescData = file_transport_dns_proto_rawDesc
)

func file_transport_dns_proto_rawDescGZIP() []byte {
	file_transport_dns_proto_rawDescOnce.Do(func() {
		file_transport_dns_proto_rawDescData = protoimpl.X.CompressGZIP(file_transport_dns_proto_rawDescData)
	})
	return file_transport_dns_proto_rawDescData
}

var file_transport_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_transport_dns_proto_goTypes = []interface{}{
	(*StartDNSListenerRequest)(nil), // 0: transport.StartDNSListenerRequest
	(*StartDNSListener)(nil),        // 1: transport.StartDNSListener
	(*DNSSessionInit)(nil),          // 2: transport.DNSSessionInit
	(*DNSPoll)(nil),                 // 3: transport.DNSPoll
	(*DNSBlockHeader)(nil),          // 4: transport.DNSBlockHeader
}
var file_transport_dns_proto_depIdxs = []int32{
	4, // 0: transport.DNSPoll.Blocks:type_name -> transport.DNSBlockHeader
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_transport_dns_proto_init() }
func file_transport_dns_proto_init() {
	if File_transport_dns_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transport_dns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDNSListenerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_dns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDNSListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_dns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSSessionInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_dns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSPoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_dns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transport_dns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transport_dns_proto_goTypes,
		DependencyIndexes: file_transport_dns_proto_depIdxs,
		MessageInfos:      file_transport_dns_proto_msgTypes,
	}.Build()
	File_transport_dns_proto = out.File
	file_transport_dns_proto_rawDesc = nil
	file_transport_dns_proto_goTypes = nil
	file_transport_dns_proto_depIdxs = nil
}
