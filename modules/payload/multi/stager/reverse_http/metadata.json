{
        "type": "payload",
        "name": "Reverse HTTP Stager implant",
        "path": ["payload", "multi", "stager", "reverse_http"],

        "author": ["BishopFox"],
        "credits": ["BishopFox"],

        "description": "A reverse HTTP Stager/Listener generation stub. This module allows you to generate a stager shellcode, that will connect back to a Staging Listener, which itself will deliver a full implant stage. This stage, in turn, will connect back to its specified connection strings. Please, therefore, ensure a Single Implant Module listener is running, and that a ghost implant build (shellcode format) is ready to be used by the staging listener of this module.",
        "notes": "",
        "references": [],

        "plaftorm": "multi",
        "targets": ["multi"],
        "arch": "multi",
        "lang": "Go",
        "privileged": false,

        "options": {
                "LHostListener": {"name": "LHost", "value": "192.168.1.1", "required": true, "description": "Host address to start the staging listener on"},
                "LPortListener": {"name": "LPort", "value": "8443", "required": true, "description": "Host port to start the staging listener on"},
                "StageImplant": {"name": "Stage", "value": "", "required": true, "description": "The Ghost implant build name (shellcode format) that the staging listener will send to the stager"},
                "Persist": {"name": "Persist", "value": "false", "required": true, "description": "Make this listener persistent (automatic spawn on server startup)"},

                "LHostStager": {"name": "LHost", "value": "", "required": true, "description": "The Host IP/Domain the stager will callback to retrieve the stage"},
                "LPortStager": {"name": "LPort", "value": "", "required": true, "description": "The Host Port to callback"},
                "StageConfig": {"name": "Stage Config", "value": "", "required": true, "description": "The Ghost implant build name (shellcode format), needed for writing the MSF payload to file (should be the same as StageImplant)"},
                "Arch": {"name": "Arch", "value": "x86", "required": true, "description": "CPU architecture of the stager's target"},
                "OutputFormat": {"name": "Output Format", "value": "raw", "required": true, "description": "Output format (msfvenom's style). All msfvenom's transform formats are supported (bash, c, csharp, dw, dword, hex, java, js_be, js_le, num, pl, powershell, ps1, py, python, raw, rb, ruby, sh, vbapplication, vbscript)."},
                "OutputStdout": {"name": "Output Stdout", "value": "false", "required": true, "description": "Output the generated Stager to console stdout"},
                "FileName": {"name": "FileName", "value": "", "required": false, "description": "Save the generated payload as '~/.wiregost/stagers/filename_stager.format'"}
        }
}
